<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="generator" content="pandoc">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <title></title>
  <style type="text/css">code{white-space: pre;}</style>
  <!--[if lt IE 9]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
  <link rel="stylesheet" href="jd.css">
</head>
<body>
<p><div id="nav"><a href="Index.htm">Jd</a>&nbsp;|&nbsp;<a href="Overview.htm">Overview</a>&nbsp;|&nbsp;<a href="General.htm">General</a>&nbsp;|&nbsp;<a href="Ops.htm">Ops</a>&nbsp;|&nbsp;<a href="Admin.htm">Admin</a>&nbsp;|&nbsp;<a href="Guide.htm">Guide</a>&nbsp;|&nbsp;<a href="Technical.htm">Technical</a>&nbsp;|&nbsp;<a href="Release.htm">Release</a>&nbsp;|&nbsp;<a href="License.htm">License</a>&nbsp;|&nbsp;<a href="Support.htm">Support</a></div></p>
<h2 id="args">args</h2>
<p>The main function is <code>jd</code>:</p>
<pre><code>   jd&#39;...&#39; NB. perform Jd op</code></pre>
<p>The argument is parsed to a list of boxes. A string is treated as list of blank delimited boxes. The first box in a list of boxes is treated as a list of blank delimited values.</p>
<pre><code>   jd&#39;insert f a&#39;;23     === jd&#39;insert&#39;;&#39;f&#39;;&#39;a&#39;;23</code></pre>
<p>Column definitions have blanks and are delimited by , or LF and have more complicated rules. The following are equivalent:</p>
<pre><code>   jd&#39;createtable f a int,b byte 4&#39;
   jd&#39;createtable f a int&#39;,LF,&#39;byte 4&#39;
   jd&#39;createtable&#39;;&#39;f&#39;;&#39;a int&#39;;&#39;b byte 4&#39;
   jd&#39;createtable f a&#39;;&#39;a int&#39;;&#39;b byte 4&#39;</code></pre>
<p>Options follow the command, start with /, and have a fixed number (0 or more) parameters.</p>
<pre><code>   jd&#39;reads /lr /e from f&#39;</code></pre>
<h2 id="names">names</h2>
<p>Column, table, and database names have similar validation:</p>
<ul>
<li>utf-8 supported</li>
<li><code> RESERVEDCHARS_jd_ </code>are not allowed in names</li>
<li><code> RESERVEDWORDS_jd_ </code>are not allowed</li>
<li>the <code>jd...</code> prefix is not allowed in table or column names</li>
<li>the <code> ~</code>... prefix is not allowed</li>
<li>the <code>+-</code> characters are allowed in names, but should be avoided in table names because of conflicts when parsing the read from clause</li>
<li>the <code>^</code> character is used by the system in table names for ptable and should be avoided</li>
</ul>
<h2 id="types">types</h2>
<p>Standard types are: boolean, int, float, byte. Only type byte can have a trailing shape.</p>
<pre><code>jd&#39;createtable f a int,b byte 4&#39; NB. int and byte cols</code></pre>
<p>There are also date types, and varbyte - a variable sized byte type.</p>
<p>Date types are stored internally as int, and converted on read/write:</p>
<h3 id="edate-epochdt">edate (epochdt)</h3>
<p>edate types are in iso 8601 format and are stored as nanoseconds before/after 2000-01-01. See tutorial epochdt.</p>
<ul>
<li>edate - 2014-01-02<br /></li>
<li>edatetime - 2014-01-02T03:04:05<br /></li>
<li>edatetimem - 2014-01-02T03:04:05,123<br /></li>
<li>edatetimen - 2014-01-02T03:04:05,123456789<br /></li>
</ul>
<h3 id="date">date</h3>
<p>date types are:</p>
<ul>
<li>date stored as int with digits yyyymmdd</li>
<li>datetime stored as int with digits yyyymmddhhmmss</li>
</ul>
<p>The csv loader supports yyyy/mm/dd vs dd/mm/yyyy.</p>
<h3 id="varbyte">varbyte</h3>
<p>With average sizes less than 50, it may be better to store the data as fixed size.</p>
<h2 id="col-data-pairs">col-data-pairs</h2>
<p>list of pairs of column names and data</p>
<p>'a' ; 23 24 ; 'b' ; 1.2 1.3 ; 'c' ; 2 3$'abcdef' 'a' ; 23 24 ; 'b' ; 1.2 ; 'c' ; 'abc'</p>
<p>data extends so the count is the same for all cols</p>
<p>byte N col does undertake but not overtake</p>
<h2 id="key">key</h2>
<p>One or more cols in a table can be treated as a key.</p>
<p>A key in a table does not have to be unique. If a table contains a key more than once, and an operation requires just one match, then the last occurrence (in row order) is the one that is used.</p>
<p><strong>ref</strong> join from table F to table G creates a jdref col in table F that is the index to the corresponding row in table G. The jdref values are <code>Gkey i: Fkey</code> so the join from table F is to the last matching row in G (or nulls if no match).</p>
<p><strong>ref /left</strong> join from table F to table G creates a jdref col in table F hat has all rows in F paired with a null row or all the rows (matched by key) in G.</p>
<p><strong>upsert</strong> key is used to determine which data rows are used to update and which data rows are inserted.</p>
<p><strong>update</strong> where clause can be a key.</p>
<p><strong>delete</strong> where clause can be a key.</p>
<p><strong>reads</strong> where clause does not currently support key. Use of key op to get rows and using them with jdindex in (...) is a workaround.</p>
<h2 id="damaged">damaged</h2>
<p>A db can be damaged by: hardware crashes, OS crashes, Jd bugs, application bugs...</p>
<p>A db is marked as damaged to prevent further use to avoid: appearing OK (when it isn't), strange errors, further damage (obscuring the original problem), wrong answers, ...</p>
<p>A db is marked as damaged when:</p>
<dl>

<dd>Jd detects a serious problem - e.g., access a col with a bad count
</dd>
<dd>jd'validate' finds a problem
</dd>
<dd>jddamage_jd_'reason' is run to mark as damaged
</dd>
</dl>
<pre><code>   jd&#39;info validate&#39;     NB. complete report
   jd&#39;info validatebad&#39;  NB. problem report
   jd&#39;validate&#39;          NB. mark db as damaged if problem report not empty</code></pre>
<p>A hardware crash mid insert can leave cols with bad counts. Accessing the db again and only using cols with good counts will work. But when you access a col with a bad count, the db will be marked as damaged.</p>
<p>After a crash (or any event that makes you nervous), always run jd'validate' to be sure there are no issues that will bite you down the road.</p>
<p>See tutorial log.</p>
<h2 id="repair">repair</h2>
<p>Jd can work with a damaged db if jdrepair has marked the db as under repair. In some cases this can facilitate determining the damage and effecting a repair.</p>
<p>The repair tool can fix some problems.</p>
<p>If you have a damaged db, try the following:</p>
<pre><code>   jdadmin ...
|db damaged and not under repair: assert
|...
   jd&#39;info validatebad&#39;
|db damaged and not under repair: assert
|...
   jdrepair_jd_ &#39;fixing it now&#39;
   jd&#39;info validatebad&#39; NB. problems
...
   repair_jd_&#39;&#39;         NB. fix col counts - mark refs as dirty
   jd&#39;info validatebad&#39; NB. are problems fixed?</code></pre>
</body>
</html>
